From 16faafef2049c237f5565e21704a94855674a8a9 Mon Sep 17 00:00:00 2001
From: George Kang <georgekang03@gmail.com>
Date: Fri, 9 Sep 2016 18:53:46 +0800
Subject: [PATCH 2/2] Use VDSO as the wrapper for KML resource

---
 arch/arm/include/asm/vdso_datapage.h |  18 +--
 arch/arm/kernel/vdso.c               |  61 ++--------
 arch/arm/vdso/vdso.lds.S             |   6 +
 arch/arm/vdso/vgettimeofday.c        | 215 +++++++++--------------------------
 kernel/time/time.c                   |   1 -
 kernel/time/timekeeping.c            |   1 -
 6 files changed, 70 insertions(+), 232 deletions(-)

diff --git a/arch/arm/include/asm/vdso_datapage.h b/arch/arm/include/asm/vdso_datapage.h
index 9be2594..725cc0f 100644
--- a/arch/arm/include/asm/vdso_datapage.h
+++ b/arch/arm/include/asm/vdso_datapage.h
@@ -30,22 +30,8 @@
  */
 struct vdso_data {
 	u32 seq_count;		/* sequence count - odd during updates */
-	u16 tk_is_cntvct;	/* fall back to syscall if false */
-	u16 cs_shift;		/* clocksource shift */
-	u32 xtime_coarse_sec;	/* coarse time */
-	u32 xtime_coarse_nsec;
-
-	u32 wtm_clock_sec;	/* wall to monotonic offset */
-	u32 wtm_clock_nsec;
-	u32 xtime_clock_sec;	/* CLOCK_REALTIME - seconds */
-	u32 cs_mult;		/* clocksource multiplier */
-
-	u64 cs_cycle_last;	/* last cycle value */
-	u64 cs_mask;		/* clocksource mask */
-
-	u64 xtime_clock_snsec;	/* CLOCK_REALTIME sub-ns base */
-	u32 tz_minuteswest;	/* timezone info for gettimeofday(2) */
-	u32 tz_dsttime;
+	unsigned long *sys_call_table;
+	unsigned long *kernel_sched_timeout;
 };
 
 union vdso_data_store {
diff --git a/arch/arm/kernel/vdso.c b/arch/arm/kernel/vdso.c
index 54a5aea..b568b79 100644
--- a/arch/arm/kernel/vdso.c
+++ b/arch/arm/kernel/vdso.c
@@ -33,6 +33,8 @@
 #include <asm/vdso.h>
 #include <asm/vdso_datapage.h>
 #include <clocksource/arm_arch_timer.h>
+#include <asm/syscall.h>
+#include <linux/sched.h>
 
 #define MAX_SYMNAME	64
 
@@ -170,9 +172,12 @@ static void __init patch_vdso(void *ehdr)
 	if (!cntvct_ok) {
 		vdso_nullpatch_one(&einfo, "__vdso_gettimeofday");
 		vdso_nullpatch_one(&einfo, "__vdso_clock_gettime");
+		vdso_nullpatch_one(&einfo, "__vdso_kernel_sched_timeout");
 	}
 }
 
+
+void update_vdso_data(void);
 static int __init vdso_init(void)
 {
 	unsigned int text_pages;
@@ -212,6 +217,8 @@ static int __init vdso_init(void)
 
 	patch_vdso(&vdso_start);
 
+	/* syscall */
+	update_vdso_data();
 	return 0;
 }
 arch_initcall(vdso_init);
@@ -276,61 +283,13 @@ static bool tk_is_cntvct(const struct timekeeper *tk)
 	return true;
 }
 
-/**
- * update_vsyscall - update the vdso data page
- *
- * Increment the sequence counter, making it odd, indicating to
- * userspace that an update is in progress.  Update the fields used
- * for coarse clocks and, if the architected system timer is in use,
- * the fields used for high precision clocks.  Increment the sequence
- * counter again, making it even, indicating to userspace that the
- * update is finished.
- *
- * Userspace is expected to sample seq_count before reading any other
- * fields from the data page.  If seq_count is odd, userspace is
- * expected to wait until it becomes even.  After copying data from
- * the page, userspace must sample seq_count again; if it has changed
- * from its previous value, userspace must retry the whole sequence.
- *
- * Calls to update_vsyscall are serialized by the timekeeping core.
- */
-void update_vsyscall(struct timekeeper *tk)
+void update_vdso_data(void)
 {
-	struct timespec64 *wtm = &tk->wall_to_monotonic;
-
-	if (!cntvct_ok) {
-		/* The entry points have been zeroed, so there is no
-		 * point in updating the data page.
-		 */
-		return;
-	}
-
 	vdso_write_begin(vdso_data);
-
-	vdso_data->tk_is_cntvct			= tk_is_cntvct(tk);
-	vdso_data->xtime_coarse_sec		= tk->xtime_sec;
-	vdso_data->xtime_coarse_nsec		= (u32)(tk->tkr_mono.xtime_nsec >>
-							tk->tkr_mono.shift);
-	vdso_data->wtm_clock_sec		= wtm->tv_sec;
-	vdso_data->wtm_clock_nsec		= wtm->tv_nsec;
-
-	if (vdso_data->tk_is_cntvct) {
-		vdso_data->cs_cycle_last	= tk->tkr_mono.cycle_last;
-		vdso_data->xtime_clock_sec	= tk->xtime_sec;
-		vdso_data->xtime_clock_snsec	= tk->tkr_mono.xtime_nsec;
-		vdso_data->cs_mult		= tk->tkr_mono.mult;
-		vdso_data->cs_shift		= tk->tkr_mono.shift;
-		vdso_data->cs_mask		= tk->tkr_mono.mask;
-	}
-
+	vdso_data->sys_call_table = sys_call_table;
+	vdso_data->kernel_sched_timeout = (unsigned long)schedule_timeout;
 	vdso_write_end(vdso_data);
 
 	flush_dcache_page(virt_to_page(vdso_data));
 }
 
-void update_vsyscall_tz(void)
-{
-	vdso_data->tz_minuteswest	= sys_tz.tz_minuteswest;
-	vdso_data->tz_dsttime		= sys_tz.tz_dsttime;
-	flush_dcache_page(virt_to_page(vdso_data));
-}
diff --git a/arch/arm/vdso/vdso.lds.S b/arch/arm/vdso/vdso.lds.S
index 89ca89f..fb4cbd1 100644
--- a/arch/arm/vdso/vdso.lds.S
+++ b/arch/arm/vdso/vdso.lds.S
@@ -80,8 +80,14 @@ VERSION
 {
 	LINUX_2.6 {
 	global:
+		clock_gettime;
 		__vdso_clock_gettime;
+		gettimeofday;
 		__vdso_gettimeofday;
+		kernel_sched_timeout;
+		__vdso_kernel_sched_timeout;
+		sched_yield;
+		__vdso_sched_yield;
 	local: *;
 	};
 }
diff --git a/arch/arm/vdso/vgettimeofday.c b/arch/arm/vdso/vgettimeofday.c
index 79214d5..5de6822 100644
--- a/arch/arm/vdso/vgettimeofday.c
+++ b/arch/arm/vdso/vgettimeofday.c
@@ -23,6 +23,7 @@
 #include <asm/bug.h>
 #include <asm/page.h>
 #include <asm/unistd.h>
+#include <asm/uaccess.h>
 #include <asm/vdso_datapage.h>
 
 #ifndef CONFIG_AEABI
@@ -59,210 +60,98 @@ static notrace int vdso_read_retry(const struct vdso_data *vdata, u32 start)
 	return vdata->seq_count != start;
 }
 
-static notrace long clock_gettime_fallback(clockid_t _clkid,
-					   struct timespec *_ts)
-{
-	register struct timespec *ts asm("r1") = _ts;
-	register clockid_t clkid asm("r0") = _clkid;
-	register long ret asm ("r0");
-	register long nr asm("r7") = __NR_clock_gettime;
-
-	asm volatile(
-	"	swi #0\n"
-	: "=r" (ret)
-	: "r" (clkid), "r" (ts), "r" (nr)
-	: "memory");
-
-	return ret;
-}
-
-static notrace int do_realtime_coarse(struct timespec *ts,
-				      struct vdso_data *vdata)
+static notrace unsigned long get_syscall_addr(struct vdso_data *vdata, unsigned int num)
 {
 	u32 seq;
+	unsigned long addr;
 
-	do {
-		seq = vdso_read_begin(vdata);
-
-		ts->tv_sec = vdata->xtime_coarse_sec;
-		ts->tv_nsec = vdata->xtime_coarse_nsec;
-
-	} while (vdso_read_retry(vdata, seq));
-
-	return 0;
-}
-
-static notrace int do_monotonic_coarse(struct timespec *ts,
-				       struct vdso_data *vdata)
-{
-	struct timespec tomono;
-	u32 seq;
+	if (num >= __NR_syscalls)
+		return 0;
 
 	do {
 		seq = vdso_read_begin(vdata);
-
-		ts->tv_sec = vdata->xtime_coarse_sec;
-		ts->tv_nsec = vdata->xtime_coarse_nsec;
-
-		tomono.tv_sec = vdata->wtm_clock_sec;
-		tomono.tv_nsec = vdata->wtm_clock_nsec;
-
+		addr = vdata->sys_call_table[num];
 	} while (vdso_read_retry(vdata, seq));
 
-	ts->tv_sec += tomono.tv_sec;
-	timespec_add_ns(ts, tomono.tv_nsec);
+	return addr;
 
-	return 0;
 }
 
-#ifdef CONFIG_ARM_ARCH_TIMER
-
-static notrace u64 get_ns(struct vdso_data *vdata)
-{
-	u64 cycle_delta;
-	u64 cycle_now;
-	u64 nsec;
-
-	cycle_now = arch_counter_get_cntvct();
-
-	cycle_delta = (cycle_now - vdata->cs_cycle_last) & vdata->cs_mask;
-
-	nsec = (cycle_delta * vdata->cs_mult) + vdata->xtime_clock_snsec;
-	nsec >>= vdata->cs_shift;
-
-	return nsec;
-}
-
-static notrace int do_realtime(struct timespec *ts, struct vdso_data *vdata)
+int clock_gettime(clockid_t clkid, struct timespec *ts)
+__attribute__((weak, alias("__vdso_clock_gettime")));
+notrace int __vdso_clock_gettime(clockid_t clkid, struct timespec *ts)
 {
-	u64 nsecs;
-	u32 seq;
-
-	do {
-		seq = vdso_read_begin(vdata);
-
-		if (!vdata->tk_is_cntvct)
-			return -1;
-
-		ts->tv_sec = vdata->xtime_clock_sec;
-		nsecs = get_ns(vdata);
-
-	} while (vdso_read_retry(vdata, seq));
+	struct vdso_data *vdata;
+	int ret = -1;
+	unsigned long syscall_addr =0;
 
-	ts->tv_nsec = 0;
-	timespec_add_ns(ts, nsecs);
+	vdata = __get_datapage();
+	syscall_addr = get_syscall_addr(vdata, __NR_clock_gettime);
+	ret = ((int (*)(clockid_t which_clock, struct timespec *tp))syscall_addr)(
+		clkid, ts);
 
-	return 0;
+	return ret;
 }
 
-static notrace int do_monotonic(struct timespec *ts, struct vdso_data *vdata)
+int gettimeofday(struct timeval *tv, struct timezone *tz)
+__attribute__((weak, alias("__vdso_gettimeofday")));
+notrace int __vdso_gettimeofday(struct timeval *tv, struct timezone *tz)
 {
-	struct timespec tomono;
-	u64 nsecs;
-	u32 seq;
-
-	do {
-		seq = vdso_read_begin(vdata);
-
-		if (!vdata->tk_is_cntvct)
-			return -1;
-
-		ts->tv_sec = vdata->xtime_clock_sec;
-		nsecs = get_ns(vdata);
-
-		tomono.tv_sec = vdata->wtm_clock_sec;
-		tomono.tv_nsec = vdata->wtm_clock_nsec;
-
-	} while (vdso_read_retry(vdata, seq));
-
-	ts->tv_sec += tomono.tv_sec;
-	ts->tv_nsec = 0;
-	timespec_add_ns(ts, nsecs + tomono.tv_nsec);
-
-	return 0;
-}
-
-#else /* CONFIG_ARM_ARCH_TIMER */
+	struct vdso_data *vdata;
+	int ret;
+	unsigned long syscall_addr;
 
-static notrace int do_realtime(struct timespec *ts, struct vdso_data *vdata)
-{
-	return -1;
-}
+	vdata = __get_datapage();
+	syscall_addr = get_syscall_addr(vdata, __NR_gettimeofday);
+	ret = ((int (*)(struct timeval *tv, struct timezone *tz))syscall_addr)(
+		tv, tz);
 
-static notrace int do_monotonic(struct timespec *ts, struct vdso_data *vdata)
-{
-	return -1;
+	return ret;
 }
 
-#endif /* CONFIG_ARM_ARCH_TIMER */
-
-notrace int __vdso_clock_gettime(clockid_t clkid, struct timespec *ts)
+int sched_yield(void)
+__attribute__((weak, alias("__vdso_sched_yield")));
+notrace int __vdso_sched_yield(void)
 {
 	struct vdso_data *vdata;
-	int ret = -1;
+	int ret;
+	unsigned long syscall_addr;
 
 	vdata = __get_datapage();
-
-	switch (clkid) {
-	case CLOCK_REALTIME_COARSE:
-		ret = do_realtime_coarse(ts, vdata);
-		break;
-	case CLOCK_MONOTONIC_COARSE:
-		ret = do_monotonic_coarse(ts, vdata);
-		break;
-	case CLOCK_REALTIME:
-		ret = do_realtime(ts, vdata);
-		break;
-	case CLOCK_MONOTONIC:
-		ret = do_monotonic(ts, vdata);
-		break;
-	default:
-		break;
-	}
-
-	if (ret)
-		ret = clock_gettime_fallback(clkid, ts);
+	syscall_addr = get_syscall_addr(vdata, __NR_sched_yield);
+	ret = ((int (*)(void))syscall_addr)();
 
 	return ret;
 }
 
-static notrace long gettimeofday_fallback(struct timeval *_tv,
-					  struct timezone *_tz)
+int nanosleep(void)
+__attribute__((weak, alias("__vdso_nanosleep")));
+notrace int __vdso_nanosleep(const struct timespec *req, struct timespec *rem)
 {
-	register struct timezone *tz asm("r1") = _tz;
-	register struct timeval *tv asm("r0") = _tv;
-	register long ret asm ("r0");
-	register long nr asm("r7") = __NR_gettimeofday;
+	struct vdso_data *vdata;
+	int ret;
+	unsigned long syscall_addr;
 
-	asm volatile(
-	"	swi #0\n"
-	: "=r" (ret)
-	: "r" (tv), "r" (tz), "r" (nr)
-	: "memory");
+	vdata = __get_datapage();
+	syscall_addr = get_syscall_addr(vdata, __NR_nanosleep);
+	ret = ((int (*)(const struct timespec *req, struct timespec *rem))syscall_addr)(
+		req, rem);
 
 	return ret;
 }
 
-notrace int __vdso_gettimeofday(struct timeval *tv, struct timezone *tz)
+signed long kernel_sched_timeout(signed long timeout)
+__attribute__((weak, alias("__vdso_kernel_sched_timeout")));
+notrace signed long __vdso_kernel_sched_timeout(signed long timeout)
 {
-	struct timespec ts;
 	struct vdso_data *vdata;
 	int ret;
+	unsigned long func_addr;
 
 	vdata = __get_datapage();
+	func_addr = vdata->kernel_sched_timeout;
 
-	ret = do_realtime(&ts, vdata);
-	if (ret)
-		return gettimeofday_fallback(tv, tz);
-
-	if (tv) {
-		tv->tv_sec = ts.tv_sec;
-		tv->tv_usec = ts.tv_nsec / 1000;
-	}
-	if (tz) {
-		tz->tz_minuteswest = vdata->tz_minuteswest;
-		tz->tz_dsttime = vdata->tz_dsttime;
-	}
+	ret = ((signed long (*)(signed long timeout))func_addr)(timeout);
 
 	return ret;
 }
diff --git a/kernel/time/time.c b/kernel/time/time.c
index 86751c6..d6687cb 100644
--- a/kernel/time/time.c
+++ b/kernel/time/time.c
@@ -178,7 +178,6 @@ int do_sys_settimeofday(const struct timespec *tv, const struct timezone *tz)
 			return -EINVAL;
 
 		sys_tz = *tz;
-		update_vsyscall_tz();
 		if (firsttime) {
 			firsttime = 0;
 			if (!tv)
diff --git a/kernel/time/timekeeping.c b/kernel/time/timekeeping.c
index a1c5c6f..2df9e0c 100644
--- a/kernel/time/timekeeping.c
+++ b/kernel/time/timekeeping.c
@@ -568,7 +568,6 @@ static void timekeeping_update(struct timekeeper *tk, unsigned int action)
 	tk_update_leap_state(tk);
 	tk_update_ktime_data(tk);
 
-	update_vsyscall(tk);
 	update_pvclock_gtod(tk, action & TK_CLOCK_WAS_SET);
 
 	update_fast_timekeeper(&tk->tkr_mono, &tk_fast_mono);
-- 
2.1.4

